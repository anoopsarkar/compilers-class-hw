; ModuleID = 'reach'
source_filename = "DecafComp"

@globalstring = private unnamed_addr constant [7 x i8] c"hello\0A\00", align 1
@globalstring.1 = private unnamed_addr constant [7 x i8] c"hello\0A\00", align 1

declare void @print_string(ptr)

declare void @print_int(i32)

define i32 @five() {
func:
  ret i32 5

unreachable:                                      ; No predecessors!
  %calltmp = call i32 @five()
  ret i32 %calltmp

unreachable1:                                     ; No predecessors!
  ret i32 0
}

define i32 @main() {
func:
  %x = alloca i32, align 4
  store i32 0, ptr %x, align 4
  call void @print_string(ptr @globalstring)
  store i32 5, ptr %x, align 4
  store i32 0, ptr %x, align 4
  br label %gate

gate:                                             ; preds = %func
  %x1 = load i32, ptr %x, align 4
  %geqtmp = icmp sge i32 %x1, 0
  br i1 %geqtmp, label %decl, label %end

loop:                                             ; preds = %next
  %x2 = load i32, ptr %x, align 4
  %geqtmp3 = icmp sge i32 %x2, 0
  br i1 %geqtmp3, label %body, label %end

decl:                                             ; preds = %gate
  br label %body

body:                                             ; preds = %decl, %loop
  %calltmp = call i32 @five()
  %addtmp5 = add i32 %calltmp, 32
  store i32 %addtmp5, ptr %x, align 4
  %calltmp6 = call i32 @five()
  %subtmp = sub i32 %calltmp6, 32
  store i32 %subtmp, ptr %x, align 4
  %calltmp7 = call i32 @five()
  %modtmp = srem i32 %calltmp7, 32
  store i32 %modtmp, ptr %x, align 4
  call void @print_string(ptr @globalstring.1)
  br label %end

next:                                             ; preds = %unreachable
  %x4 = load i32, ptr %x, align 4
  %addtmp = add i32 %x4, 1
  store i32 %addtmp, ptr %x, align 4
  br label %loop

end:                                              ; preds = %body, %loop, %gate
  ret i32 0

unreachable:                                      ; No predecessors!
  %calltmp8 = call i32 @five()
  %multmp = mul i32 %calltmp8, 32
  store i32 %multmp, ptr %x, align 4
  %calltmp9 = call i32 @five()
  %calltmp10 = call i32 @five()
  %addtmp11 = add i32 %calltmp9, %calltmp10
  store i32 %addtmp11, ptr %x, align 4
  %calltmp12 = call i32 @five()
  %calltmp13 = call i32 @five()
  %subtmp14 = sub i32 %calltmp12, %calltmp13
  store i32 %subtmp14, ptr %x, align 4
  br label %next

unreachable15:                                    ; No predecessors!
  ret i32 0
}
