; ModuleID = 'foo'
source_filename = "DecafComp"

@globalstring = private unnamed_addr constant [4 x i8] c"foo\00", align 1

declare void @print_int(i32)

declare void @print_string(ptr)

define i1 @foo() {
func:
  call void @print_string(ptr @globalstring)
  ret i1 false

unreachable:                                      ; No predecessors!
  ret i1 true
}

define i32 @main() {
func:
  %flag = alloca i1, align 1
  store i1 false, ptr %flag, align 1
  br i1 true, label %skctend, label %noskct

noskct:                                           ; preds = %func
  %calltmp = call i1 @foo()
  br i1 %calltmp, label %noskct1, label %skctend2

skctend:                                          ; preds = %skctend2, %func
  %phival3 = phi i1 [ true, %func ], [ %ortmp, %skctend2 ]
  store i1 %phival3, ptr %flag, align 1
  %flag4 = load i1, ptr %flag, align 1
  %zexttmp = zext i1 %flag4 to i32
  call void @print_int(i32 %zexttmp)
  ret i32 0

noskct1:                                          ; preds = %noskct
  %andtmp = and i1 %calltmp, false
  br label %skctend2

skctend2:                                         ; preds = %noskct1, %noskct
  %phival = phi i1 [ %calltmp, %noskct ], [ %andtmp, %noskct1 ]
  %ortmp = or i1 true, %phival
  br label %skctend
}
