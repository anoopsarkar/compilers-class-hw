; ModuleID = 'Test'
source_filename = "DecafComp"

declare void @print_int(i32)

define i32 @main() {
func:
  %x = alloca i32, align 4
  store i32 0, ptr %x, align 4
  br label %if

if:                                               ; preds = %func
  br i1 true, label %true, label %false

true:                                             ; preds = %if
  br i1 true, label %skctend, label %noskct

false:                                            ; preds = %skctend10, %if
  ret i32 0

noskct:                                           ; preds = %true
  br label %skctend

skctend:                                          ; preds = %noskct, %true
  %phival = phi i1 [ true, %true ], [ true, %noskct ]
  %zexttmp = zext i1 %phival to i32
  call void @print_int(i32 %zexttmp)
  br i1 true, label %skctend2, label %noskct1

noskct1:                                          ; preds = %skctend
  br label %skctend2

skctend2:                                         ; preds = %noskct1, %skctend
  %phival3 = phi i1 [ true, %skctend ], [ true, %noskct1 ]
  %zexttmp4 = zext i1 %phival3 to i32
  call void @print_int(i32 %zexttmp4)
  br i1 false, label %skctend6, label %noskct5

noskct5:                                          ; preds = %skctend2
  br label %skctend6

skctend6:                                         ; preds = %noskct5, %skctend2
  %phival7 = phi i1 [ false, %skctend2 ], [ true, %noskct5 ]
  %zexttmp8 = zext i1 %phival7 to i32
  call void @print_int(i32 %zexttmp8)
  br i1 false, label %skctend10, label %noskct9

noskct9:                                          ; preds = %skctend6
  br label %skctend10

skctend10:                                        ; preds = %noskct9, %skctend6
  %phival11 = phi i1 [ false, %skctend6 ], [ false, %noskct9 ]
  %zexttmp12 = zext i1 %phival11 to i32
  call void @print_int(i32 %zexttmp12)
  br label %false
}
